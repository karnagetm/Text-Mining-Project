{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "El_vU9NocxVC"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/karnagetm/Text-Mining-Project/blob/main/V2_Karan_patel_Task.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Prior study (Codes in Week 5 folder）**:\n",
        "\n",
        "Please use this page as companion to understand the newsgroup data set.\n",
        "[Data Set](https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html)\n",
        "\n",
        "You will also need to be familiar with some text processing commands：\n",
        "\n",
        "[Tf-idf](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfTransformer.html)\n",
        "\n",
        "[countvectorizer](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html)\n"
      ],
      "metadata": {
        "id": "1ZVVMai8xRFX"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yhgYu18FM-_L"
      },
      "source": [
        "from IPython import get_ipython\n",
        "get_ipython().magic('reset -sf')"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QXdrc29D71MH"
      },
      "source": [
        "# **Steps outline**\n",
        "1. Download your data set by inputting your student number.\n",
        "2. Process your text data, extract features, convert them into vectors\n",
        "3. Modeling, train models on the data set (select model, tune different parameters)\n",
        "4. Process your text data, extract features, convert them into vectors\n",
        "5. Analysis and discussions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "934uDa63sRnp"
      },
      "source": [
        "# Step 1: Load Dataset\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prior study (Codes in Week 5 folder）:\n",
        "\n",
        "Please use this page as companion to understand  [**Newsgroup data set**](https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html)\n"
      ],
      "metadata": {
        "id": "2k-V81t0z_NF"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cxDjTTcDrtVl"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "categories = ['alt.atheism', 'soc.religion.christian', 'comp.graphics', 'sci.med']\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "twenty_train = fetch_20newsgroups(subset='train',  categories=categories, shuffle=True, random_state=42)\n",
        "twenty_test = fetch_20newsgroups(subset='test',  categories=categories, shuffle=True, random_state=42)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O8VrHduYC-kd"
      },
      "source": [
        "**This is how to identify which data set to use (Please copy  the following information in report front   page).**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gvU6i2KNHzC4",
        "outputId": "5a9c278e-8213-4214-b462-5c1da8e951b2"
      },
      "source": [
        "index=input('type your student number?')"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "type your student number?30021323\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=divmod(int(index),4)\n",
        "yourdata1=x[1]\n",
        "y=divmod(int(index),3)\n",
        "yourdata2=y[1]\n",
        "\n",
        "print('This is your data set index ----> (', x[1], y[1], ')' )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a8Gmf-HdGcWV",
        "outputId": "8d45c010-7f15-4c21-fc0b-56ff275a8522"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is your data set index ----> ( 3 2 )\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HXPpVRSGAPM7",
        "outputId": "dac849d9-7ce9-4bd4-ae83-713f3feaf89e"
      },
      "source": [
        "data1= twenty_train.target_names[x[1]]\n",
        "data2= twenty_train.target_names[y[1]]\n",
        "categories1=[data1,data2]\n",
        "print(categories1)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['soc.religion.christian', 'sci.med']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aNjBtO7-DOsu"
      },
      "source": [
        "**Your front page data information Ends here**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v1jAHpjtaSPu"
      },
      "source": [
        "# Step 2 Process your text data, extract features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "El_vU9NocxVC"
      },
      "source": [
        "# 2.1 An example of preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eDHwDyKzNirS"
      },
      "source": [
        "**An example is provided.**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Please pay attention  comment #replace ..., which means you need to change example text to your data set.\n",
        "Use google search for usages of  \"nltk tokenizer ”, \"nltk stemmer\", \"nltk pos tag\" to help your report writing."
      ],
      "metadata": {
        "id": "utJ6ap1bacK3"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wC3yT07PJnKp",
        "outputId": "e5067cf6-f8ce-4ef9-d1dc-3ff043a367a9"
      },
      "source": [
        "# write your own NLP precessing examples with  preprocessing techniques.\n",
        "\n",
        "\n",
        "dataset=twenty_train.data[2]\n",
        "dataset=twenty_train.data[3]\n",
        "print(dataset)\n",
        "# please   replace 1 in bracket to other data sample and explore the code\n",
        "\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "nltk.download('wordnet')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "From: s0612596@let.rug.nl (M.M. Zwart)\n",
            "Subject: catholic church poland\n",
            "Organization: Faculteit der Letteren, Rijksuniversiteit Groningen, NL\n",
            "Lines: 10\n",
            "\n",
            "Hello,\n",
            "\n",
            "I'm writing a paper on the role of the catholic church in Poland after 1989. \n",
            "Can anyone tell me more about this, or fill me in on recent books/articles(\n",
            "in english, german or french). Most important for me is the role of the \n",
            "church concerning the abortion-law, religious education at schools,\n",
            "birth-control and the relation church-state(government). Thanx,\n",
            "\n",
            "                                                 Masja,\n",
            "\"M.M.Zwart\"<s0612596@let.rug.nl>\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "37d592dc-8732-4e3b-bc6e-319be5206c6f",
        "id": "cRHBOWMnAAWA"
      },
      "source": [
        "\n",
        "# tokenize: search: nltk tokenize\n",
        "example = \"This is an example sentence.\"\n",
        "\n",
        "from nltk.tokenize import word_tokenize\n",
        "example_tokenize =word_tokenize(dataset)\n",
        "#example_tokenize= word_tokenize(dataset) # replace example in bracket to dataset.\n",
        "print(\"-------------------------tokenize:\")\n",
        "print(example_tokenize)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------------tokenize:\n",
            "['From', ':', 's0612596', '@', 'let.rug.nl', '(', 'M.M', '.', 'Zwart', ')', 'Subject', ':', 'catholic', 'church', 'poland', 'Organization', ':', 'Faculteit', 'der', 'Letteren', ',', 'Rijksuniversiteit', 'Groningen', ',', 'NL', 'Lines', ':', '10', 'Hello', ',', 'I', \"'m\", 'writing', 'a', 'paper', 'on', 'the', 'role', 'of', 'the', 'catholic', 'church', 'in', 'Poland', 'after', '1989', '.', 'Can', 'anyone', 'tell', 'me', 'more', 'about', 'this', ',', 'or', 'fill', 'me', 'in', 'on', 'recent', 'books/articles', '(', 'in', 'english', ',', 'german', 'or', 'french', ')', '.', 'Most', 'important', 'for', 'me', 'is', 'the', 'role', 'of', 'the', 'church', 'concerning', 'the', 'abortion-law', ',', 'religious', 'education', 'at', 'schools', ',', 'birth-control', 'and', 'the', 'relation', 'church-state', '(', 'government', ')', '.', 'Thanx', ',', 'Masja', ',', \"''\", 'M.M.Zwart', \"''\", '<', 's0612596', '@', 'let.rug.nl', '>']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3baad0df-750a-4278-ef3f-ec1ceaf73d35",
        "id": "kAaaP86_Ahmo"
      },
      "source": [
        "# stemmer: search: nltk stemmer\n",
        "stemmer = nltk.stem.PorterStemmer()\n",
        "example_stem = stemmer.stem(example)  # replace .....\n",
        "print(\"-------------------------stem:\")\n",
        "print(example_stem)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------------stem:\n",
            "this is an example sentence.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pos_taging: search: nltk pos tagging example\n",
        "example_posTag=nltk.pos_tag(example_tokenize)\n",
        "print(\"-------------------------pos_taging:\")\n",
        "print(example_posTag)"
      ],
      "metadata": {
        "id": "iL4Vr-m0ApLu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6696c660-db59-4474-9889-ba1ea402013c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------------pos_taging:\n",
            "[('From', 'IN'), (':', ':'), ('s0612596', 'NN'), ('@', 'NN'), ('let.rug.nl', 'NN'), ('(', '('), ('M.M', 'NNP'), ('.', '.'), ('Zwart', 'NNP'), (')', ')'), ('Subject', 'NN'), (':', ':'), ('catholic', 'JJ'), ('church', 'NN'), ('poland', 'NN'), ('Organization', 'NNP'), (':', ':'), ('Faculteit', 'NNP'), ('der', 'NN'), ('Letteren', 'NNP'), (',', ','), ('Rijksuniversiteit', 'NNP'), ('Groningen', 'NNP'), (',', ','), ('NL', 'NNP'), ('Lines', 'NNPS'), (':', ':'), ('10', 'CD'), ('Hello', 'NNP'), (',', ','), ('I', 'PRP'), (\"'m\", 'VBP'), ('writing', 'VBG'), ('a', 'DT'), ('paper', 'NN'), ('on', 'IN'), ('the', 'DT'), ('role', 'NN'), ('of', 'IN'), ('the', 'DT'), ('catholic', 'JJ'), ('church', 'NN'), ('in', 'IN'), ('Poland', 'NNP'), ('after', 'IN'), ('1989', 'CD'), ('.', '.'), ('Can', 'MD'), ('anyone', 'NN'), ('tell', 'VB'), ('me', 'PRP'), ('more', 'JJR'), ('about', 'IN'), ('this', 'DT'), (',', ','), ('or', 'CC'), ('fill', 'VB'), ('me', 'PRP'), ('in', 'IN'), ('on', 'IN'), ('recent', 'JJ'), ('books/articles', 'NNS'), ('(', '('), ('in', 'IN'), ('english', 'NN'), (',', ','), ('german', 'JJ'), ('or', 'CC'), ('french', 'JJ'), (')', ')'), ('.', '.'), ('Most', 'RBS'), ('important', 'JJ'), ('for', 'IN'), ('me', 'PRP'), ('is', 'VBZ'), ('the', 'DT'), ('role', 'NN'), ('of', 'IN'), ('the', 'DT'), ('church', 'NN'), ('concerning', 'VBG'), ('the', 'DT'), ('abortion-law', 'NN'), (',', ','), ('religious', 'JJ'), ('education', 'NN'), ('at', 'IN'), ('schools', 'NNS'), (',', ','), ('birth-control', 'NN'), ('and', 'CC'), ('the', 'DT'), ('relation', 'NN'), ('church-state', 'NN'), ('(', '('), ('government', 'NN'), (')', ')'), ('.', '.'), ('Thanx', 'NNP'), (',', ','), ('Masja', 'NNP'), (',', ','), (\"''\", \"''\"), ('M.M.Zwart', 'NNP'), (\"''\", \"''\"), ('<', 'NN'), ('s0612596', 'VBD'), ('@', 'NNP'), ('let.rug.nl', 'NN'), ('>', 'NN')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39d37a96-ec22-4b15-ab62-b345830f615d",
        "id": "O-n6AAbc_-_5"
      },
      "source": [
        " # consituency parsing, chunking\n",
        "grammar = \"NP: {<DT>?<JJ>*<NN>}\"\n",
        "cp = nltk.RegexpParser(grammar)\n",
        "result = cp.parse(example_posTag)\n",
        "print(result)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(S\n",
            "  From/IN\n",
            "  :/:\n",
            "  (NP s0612596/NN)\n",
            "  (NP @/NN)\n",
            "  (NP let.rug.nl/NN)\n",
            "  (/(\n",
            "  M.M/NNP\n",
            "  ./.\n",
            "  Zwart/NNP\n",
            "  )/)\n",
            "  (NP Subject/NN)\n",
            "  :/:\n",
            "  (NP catholic/JJ church/NN)\n",
            "  (NP poland/NN)\n",
            "  Organization/NNP\n",
            "  :/:\n",
            "  Faculteit/NNP\n",
            "  (NP der/NN)\n",
            "  Letteren/NNP\n",
            "  ,/,\n",
            "  Rijksuniversiteit/NNP\n",
            "  Groningen/NNP\n",
            "  ,/,\n",
            "  NL/NNP\n",
            "  Lines/NNPS\n",
            "  :/:\n",
            "  10/CD\n",
            "  Hello/NNP\n",
            "  ,/,\n",
            "  I/PRP\n",
            "  'm/VBP\n",
            "  writing/VBG\n",
            "  (NP a/DT paper/NN)\n",
            "  on/IN\n",
            "  (NP the/DT role/NN)\n",
            "  of/IN\n",
            "  (NP the/DT catholic/JJ church/NN)\n",
            "  in/IN\n",
            "  Poland/NNP\n",
            "  after/IN\n",
            "  1989/CD\n",
            "  ./.\n",
            "  Can/MD\n",
            "  (NP anyone/NN)\n",
            "  tell/VB\n",
            "  me/PRP\n",
            "  more/JJR\n",
            "  about/IN\n",
            "  this/DT\n",
            "  ,/,\n",
            "  or/CC\n",
            "  fill/VB\n",
            "  me/PRP\n",
            "  in/IN\n",
            "  on/IN\n",
            "  recent/JJ\n",
            "  books/articles/NNS\n",
            "  (/(\n",
            "  in/IN\n",
            "  (NP english/NN)\n",
            "  ,/,\n",
            "  german/JJ\n",
            "  or/CC\n",
            "  french/JJ\n",
            "  )/)\n",
            "  ./.\n",
            "  Most/RBS\n",
            "  important/JJ\n",
            "  for/IN\n",
            "  me/PRP\n",
            "  is/VBZ\n",
            "  (NP the/DT role/NN)\n",
            "  of/IN\n",
            "  (NP the/DT church/NN)\n",
            "  concerning/VBG\n",
            "  (NP the/DT abortion-law/NN)\n",
            "  ,/,\n",
            "  (NP religious/JJ education/NN)\n",
            "  at/IN\n",
            "  schools/NNS\n",
            "  ,/,\n",
            "  (NP birth-control/NN)\n",
            "  and/CC\n",
            "  (NP the/DT relation/NN)\n",
            "  (NP church-state/NN)\n",
            "  (/(\n",
            "  (NP government/NN)\n",
            "  )/)\n",
            "  ./.\n",
            "  Thanx/NNP\n",
            "  ,/,\n",
            "  Masja/NNP\n",
            "  ,/,\n",
            "  ''/''\n",
            "  M.M.Zwart/NNP\n",
            "  ''/''\n",
            "  (NP </NN)\n",
            "  s0612596/VBD\n",
            "  @/NNP\n",
            "  (NP let.rug.nl/NN)\n",
            "  (NP >/NN))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c7VpnVNpKuUt"
      },
      "source": [
        "#2.2 NLP Preprocesssing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0hmXyhqwOaUQ"
      },
      "source": [
        "**Some preprocessing are provided for convenience. Please include why NLP preprocessing is in your report. Explain what techniques have been experimented in your report.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B8u5y9adK3tc",
        "outputId": "7f7331af-4790-4a11-f382-3e08fd0f9c57"
      },
      "source": [
        "import nltk\n",
        "import re\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfTransformer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from nltk.tokenize import sent_tokenize, word_tokenize\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "from tqdm import tqdm\n",
        "from nltk.corpus import stopwords\n",
        "stopwordEn = stopwords.words('english')\n",
        "from nltk.corpus import wordnet\n",
        "nltk.download('wordnet')\n",
        "from nltk.stem.snowball import SnowballStemmer\n",
        "stemmer = SnowballStemmer(\"english\", ignore_stopwords=True)\n",
        "\n",
        "def lemmaWord(word):\n",
        "    lemma = wordnet.morphy(word)\n",
        "    if lemma is not None:\n",
        "        return lemma\n",
        "    else:\n",
        "        return word\n",
        "\n",
        "def stemWord(word):\n",
        "    stem = stemmer.stem(word)\n",
        "    if stem is not None:\n",
        "        return stem\n",
        "    else:\n",
        "        return word\n",
        "\n",
        "def processText(text,lemma=False, gram=1, rmStop=True): # default remove stop words\n",
        "    text = re.sub(r'(https|http)?:\\/\\/(\\w|\\.|\\/|\\?|\\=|\\&|\\%)*\\b|@\\w+|#', '', text, flags=re.MULTILINE) #delete URL, #hashtag# , and @xxx\n",
        "    tokens = word_tokenize(text)\n",
        "    whitelist = [\"n't\", \"not\", \"no\"]\n",
        "    new_tokens = []\n",
        "    stoplist = stopwordEn if rmStop else []\n",
        "    for i in tokens:\n",
        "      i = i.lower()\n",
        "      if i.isalpha() and (i not in stoplist or i in whitelist):  #i not in ['.',',',';']  and (...)\n",
        "        if lemma: i = lemmaWord(i)\n",
        "        new_tokens.append(i)\n",
        "    del tokens\n",
        "    # tokens = [lemmaWord(i.lower()) if lemma else i.lower() for i in tokens if (i.lower() not in stoplist or i.lower() in whitelist) and i.isalpha()]\n",
        "    if gram<=1:\n",
        "        return new_tokens\n",
        "    else:\n",
        "        return [' '.join(ngram) for ngram in nltk.ngrams(new_tokens, gram)] # altered for N-grams\n",
        "        #return [' '.join(i) for i in nltk.ngrams(new_tokens, gram)]\n",
        "\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YKFoZaWSVrnq"
      },
      "source": [
        "def getTags(text):\n",
        "  token = word_tokenize(text)\n",
        "  token = [l.lower() for l in token]\n",
        "  train_tags = nltk.pos_tag(token)\n",
        "  return [i[1] for i in train_tags]\n"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#processed_text_bigrams = processText(dataset[3], lemma=False, gram=2, rmStop=True)  # for the third document\n",
        "#processed_text_bigrams = processText(dataset[2], lemma=False, gram=2, rmStop=True)  # for the second document\n",
        "#process the third and second documents,individually and obtain bigrams from each doc\n",
        "\n",
        "\n",
        "\n",
        "# The above assumes that your processText function is designed to work with CountVectorizer\n",
        "# and returns a list of tokens.\n",
        "\n",
        "def processText(text, lemma=False, gram=1, rmStop=True):\n",
        "    # Your existing preprocessing code (such as lowercasing, removing special characters, etc.)\n",
        "    # ...\n",
        "\n",
        "    # Tokenize the text\n",
        "    tokens = word_tokenize(text)\n",
        "\n",
        "    # Remove stopwords\n",
        "    if rmStop:\n",
        "        stopwords_list = stopwords.words('english')\n",
        "        tokens = [token for token in tokens if token.lower() not in stopwords_list]\n",
        "\n",
        "    # Apply lemmatization or stemming if needed\n",
        "    if lemma:\n",
        "        # Apply lemmatization\n",
        "        lemmatizer = WordNetLemmatizer()\n",
        "        tokens = [lemmatizer.lemmatize(token) for token in tokens]\n",
        "    else:\n",
        "        # Or apply stemming\n",
        "        stemmer = SnowballStemmer('english')\n",
        "        tokens = [stemmer.stem(token) for token in tokens]\n",
        "\n",
        "    # Generate n-grams if required\n",
        "    if gram > 1:\n",
        "        # Create bigrams from the tokens and join them as a string\n",
        "        bigrams = [' '.join(pair) for pair in ngrams(tokens, gram)]\n",
        "        return ' '.join(bigrams)  # Return a single string of bigrams\n",
        "    else:\n",
        "        return ' '.join(tokens)  # Return a single string of unigrams"
      ],
      "metadata": {
        "id": "dEnx3XJXC2YF"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import fetch_20newsgroups\n",
        "\n",
        "# Load the dataset\n",
        "categories = ['sci.med', 'soc.religion.christian']\n",
        "twenty_train = fetch_20newsgroups(subset='train', categories=categories, shuffle=True, random_state=42)\n",
        "\n",
        "# Assuming processText is a function that accepts a single document text and returns its processed form\n",
        "processed_texts = [processText(text) for text in twenty_train.data]\n"
      ],
      "metadata": {
        "id": "ZxIeIoInENWo"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer # N-GRAM TOKEN SEARCH\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "\n",
        "# Load the dataset\n",
        "categories = ['sci.med', 'soc.religion.christian']\n",
        "twenty_train = fetch_20newsgroups(subset='train', categories=categories, shuffle=True, random_state=42)\n",
        "twenty_test = fetch_20newsgroups(subset='test', categories=categories, shuffle=True, random_state=42)\n",
        "\n",
        "# Define the Pipeline\n",
        "text_clf = Pipeline([\n",
        "    ('vect', CountVectorizer(analyzer='word', ngram_range=(1, 2))),\n",
        "    ('tfidf', TfidfTransformer()),\n",
        "    ('clf', LogisticRegression()),\n",
        "])\n",
        "\n",
        "# Train the model\n",
        "text_clf.fit(twenty_train.data, twenty_train.target)\n",
        "\n",
        "# Evaluate the model\n",
        "predicted = text_clf.predict(twenty_test.data)\n",
        "\n",
        "print(processText(twenty_train.data[3]))\n",
        "print(processText(twenty_train.data[2]))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QN3bbBMwP0mi",
        "outputId": "02be4cc0-d95b-441f-ca7a-ece21163b5cb"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ": cpage @ two-step.seas.upenn.edu ( carter c. page ) subject : : `` accept jeesus heart ... '' organ : univers pennsylvania line : 34 articl < apr.10.05.32.36.1993.14391 @ athos.rutgers.edu > gsu0033 @ uxa.ecn.bgu.edu ( eric mola ) write : > first , atheist . . . . ( atheist drivel delet . . . ) untitl ======== seed miracul thing , sit shelf forev . know , 's stuck ground , make clever . draw nutrient soil 's root , gather forc sun put forth whole lot blossom fruit , reced done . program seed know ? put sun sky ? put food dirt root ? told bee come ? make water fall , refresh make everyth pure ? perhap product love , perhap happen chanc . yeah , sure . -johnni hart , cartoonist _b.c._ +-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-= carter c. page | happi crown chiefest part wisdom , carpent 's apprentic | hold god awe . law , cpage @ seas.upenn.edu | see stricken heart pride brought , | learn old . -adapt sophocl +-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=+-=-+-=+-=-+=-+-=-+-=-+=-+-=\n",
            ": maridai @ comm.mot.com ( marida ignacio ) subject : : everi lent suffer save us organ : trunking_fix line : 59 stori relat one seven apparit approv church worthi belief . happen la sall , franc . moral lesson stori : lamb god sacrif blood use cleans us sin everi moment god perceiv worthi done heaven . mari weep lamb rest offspr . continu disobey god sin . mari , messeng , given task make us awar ' evil serpent ( communism , war , famin , unfaith , disobedi god , etc . ) run rest offspr . children went astray disobedi led dragon brought back peac love messag , repar sin , obey god 's command worthi presenc lamb . conceiv without sin worthi bear son god womb , mari prepar us , church , bodi christ , second come ( make sure protect dragon ) . also , prepar new eden , revers deed ancient eve . new eden sanctuari righteous judg christ next come . relat stori : believ mari , one apparit 19th 20th centuri , appear two children tend goat cow ( forgot exact place ) . weep tell children afraid 's `` go lose son 's arm '' . mourn townfolk fault would drought harvest ; much good food year last year . mari tell children : * townfolk place work whole * * week even sunday church * * honor god . townfolk swear * * use son 's name bad word . * son 's arm heavi pain . ask pray . children said `` hard '' . ask pray everi morn night . children went back work tell somebodi . news spred thorough * investig incid , townfolk * * convert faith obedi god * * restor communiti . * , lamb succeed . -marida `` ... spread god 's word action ... '' -mother teresa\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-ZRqySa8cbr1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de34159d-8186-4da7-ac84-b94dd2d104d6"
      },
      "source": [
        "tagged_texts = [getTags(' '.join(text)) for text in processed_texts]\n",
        "\n",
        "# Process the first document and get its POS tags\n",
        "processed_text = processText(twenty_train.data[3])\n",
        "processed_text = processText(twenty_train.data[2])\n",
        "tagged_text = getTags(' '.join(processed_text))\n",
        "print(tagged_text)\n",
        "\n"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[':', 'NN', 'DT', 'NN', 'NN', 'VBP', 'DT', 'JJ', 'NNP', 'NN', 'NN', 'NN', 'NN', '.', 'NN', 'JJ', 'NN', '.', 'VB', 'JJ', 'NN', '(', 'VB', 'DT', 'NN', 'NN', 'VBP', 'DT', 'JJ', 'NN', 'IN', 'DT', 'NN', 'NN', 'VBP', ')', 'NN', 'JJ', 'NN', 'NN', 'NN', 'JJ', 'NN', ':', ':', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'VBD', 'DT', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'VBD', 'DT', 'NN', ':', 'NN', 'NN', 'JJ', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NNP', 'NN', 'NN', 'VBP', 'NN', 'NN', 'VBP', 'NN', ':', 'CD', 'CD', 'NN', 'NN', 'IN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'DT', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'IN', 'DT', 'NN', 'NN', 'DT', 'NN', 'NN', 'VBP', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'VBP', 'NN', '.', 'VB', 'DT', 'NN', 'NN', 'NN', 'JJ', 'NN', 'DT', 'NN', 'DT', 'NN', 'NN', ',', 'JJ', 'NN', 'DT', 'JJ', 'NN', '.', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'IN', 'NN', 'NN', ':', 'NN', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBD', 'DT', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'VBP', 'DT', 'JJ', 'NN', 'JJ', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'VBP', 'JJ', 'JJ', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', '.', 'VB', 'DT', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', '.', 'VB', 'JJ', 'JJ', 'NN', 'NN', 'VBP', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', '.', 'VB', 'DT', 'NN', 'NN', ',', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', ',', 'NN', 'NN', 'VBP', 'NN', 'JJ', 'VBZ', 'DT', 'JJ', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'JJ', 'VBZ', 'DT', 'NN', 'DT', 'NN', \"''\", 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', '(', 'JJ', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'VBP', 'NN', ',', 'VBP', 'DT', 'NN', ',', 'VB', 'DT', 'NN', 'NN', 'VBP', ',', 'JJ', 'FW', 'VBP', 'DT', 'NN', 'NN', 'NN', ',', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', ',', 'FW', 'JJ', 'NN', '.', ')', 'NN', 'JJ', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', '.', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'JJ', 'VBZ', 'DT', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'VBD', 'DT', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBD', 'DT', 'NN', ',', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'VBP', ',', 'JJ', 'NN', 'NN', 'NN', 'NN', 'IN', 'NN', \"''\", 'JJ', 'NNS', 'VBP', 'JJ', 'FW', 'DT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'VBZ', 'DT', 'NN', 'NN', '.', 'VB', 'JJ', 'JJ', 'NN', 'NN', 'JJ', 'VBP', 'NN', 'NN', 'VBP', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'DT', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', ',', 'VB', 'DT', 'NN', 'NN', 'VBP', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'JJ', 'NN', ',', 'VBP', 'NN', 'JJ', 'NN', 'NN', 'NN', ',', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'VBP', 'NN', ',', 'JJ', 'NN', 'NNS', 'VBP', 'JJ', 'NN', 'NN', 'IN', 'JJ', 'NN', '(', 'VB', 'DT', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'IN', 'NN', ')', '.', 'DT', 'NN', 'NN', 'NN', ',', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', ',', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'VBP', 'JJ', 'NN', 'NN', 'NN', 'NN', '.', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'IN', 'DT', 'NN', 'NN', 'VBP', 'NN', 'VBP', 'NN', 'NN', 'NN', 'IN', 'JJ', 'JJ', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'JJ', 'NN', 'NNP', 'NN', 'NN', 'IN', 'JJ', 'NN', '.', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'IN', 'NN', 'NN', ':', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NNS', 'VB', 'DT', 'NN', 'NN', ',', 'JJ', 'FW', 'FW', 'DT', 'NN', 'NN', 'DT', 'NN', 'NN', 'VBP', 'CD', 'CD', 'NN', 'VBD', 'CD', 'CD', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'JJ', 'NN', 'NN', ',', 'DT', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'IN', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'NN', 'IN', 'DT', 'JJ', 'NN', 'NN', 'NN', '(', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', ')', '.', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'IN', 'DT', 'JJ', 'NN', 'DT', 'JJ', 'NN', \"''\", 'JJ', '``', '``', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'IN', 'NN', \"''\", 'VBZ', 'DT', 'NN', 'NN', 'POS', 'POS', '.', 'NNS', 'VBP', 'JJ', 'NN', 'JJ', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'VBD', 'DT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'VBD', 'DT', 'NN', 'NN', 'NN', 'JJ', 'NN', ':', 'CC', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'DT', 'JJ', 'NN', 'NN', 'VBZ', 'DT', 'NN', '.', 'VB', 'DT', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', ':', 'JJ', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NNP', 'NNP', 'VBD', 'JJ', 'NN', 'NN', 'FW', 'FW', 'FW', 'FW', 'FW', 'JJ', 'FW', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NNP', 'NNP', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', '.', 'JJ', 'JJ', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'VBD', 'JJ', 'NN', 'DT', 'NN', 'NNP', 'NNP', 'JJ', 'NN', 'NN', 'NN', 'IN', 'NN', \"''\", 'JJ', 'IN', 'DT', 'NN', 'NN', 'VBD', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', '.', 'JJ', 'JJ', 'NN', 'NN', \"''\", 'VBZ', 'DT', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'VBP', 'DT', 'NN', 'NN', '.', 'DT', 'JJ', 'NN', 'NN', 'VBZ', 'DT', 'NN', '.', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'JJ', 'VBZ', 'DT', 'JJ', 'NN', '``', '``', 'VB', 'DT', 'NN', 'NN', 'POS', \"''\", '.', 'DT', 'JJ', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'JJ', 'NN', 'IN', 'JJ', 'NN', 'VBP', 'NN', 'NN', '.', 'JJ', 'NN', 'NN', 'VBP', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'VBD', 'DT', 'NN', 'NN', 'WRB', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'IN', 'NN', 'NN', 'NN', 'IN', 'NN', 'NN', '.', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'VBP', 'NN', 'NN', 'VBD', 'NN', 'NN', 'VBP', 'NN', 'VBP', 'NN', 'NN', 'NN', ',', 'JJ', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NNP', 'NNP', 'VBZ', 'JJ', 'JJ', 'NN', 'NN', 'NN', 'NN', 'VBD', 'DT', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBP', 'JJ', 'NN', 'NNP', 'NNP', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'IN', 'JJ', 'NN', 'JJ', 'NN', 'NN', 'VBP', 'NN', '.', 'NN', ',', 'VBZ', 'DT', 'NN', 'NN', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', '.', ':', 'NN', 'DT', 'NN', 'NN', 'VBP', 'DT', '``', '``', '.', '.', '.', 'JJ', 'NN', 'NN', 'VBZ', 'DT', 'NN', 'NN', 'IN', 'NN', \"''\", 'JJ', 'NN', 'NN', 'NN', 'VBZ', 'DT', 'JJ', 'NN', 'NN', 'VBP', 'NN', '.', '.', '.', \"''\", 'POS', ':', 'NN', 'JJ', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'NN', 'VBD', 'DT']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "44xTvpLa_UC9"
      },
      "source": [
        "# Step 3: Build a Pipeline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7g5g93owSogu"
      },
      "source": [
        "**Modify the block code below to your choice of classifier [link text](https://www.nltk.org/book/ch06.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lGs1A8S1TMTi"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i9HMKvgGMHPB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8700598e-278e-4e51-e4a9-6ca9900a877c"
      },
      "source": [
        "print(categories1)\n"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['soc.religion.christian', 'sci.med']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Without modification, the code will output all four classes.\n",
        "\n",
        "\n",
        "I included some commented codes in places where you may use to change to two class data sets   from your student number, and use logistic model.\n",
        "Your data sets can be obtained as twenty_train1, twenty_test1. All  data set names can be adjusted to get it right."
      ],
      "metadata": {
        "id": "Yl4relrvUjHt"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9PDFkEEiL1GQ"
      },
      "source": [
        "twenty_train1 = fetch_20newsgroups(subset='train',  categories=categories1, shuffle=True, random_state=42)\n",
        "twenty_test1 = fetch_20newsgroups(subset='test',  categories=categories1, shuffle=True, random_state=42)"
      ],
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vNm3axlhdzlF"
      },
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfTransformer\n",
        "from sklearn.linear_model import SGDClassifier, LogisticRegression\n",
        "\n",
        "# Level: lexicon, model: tf-idf\n",
        "text_clf = Pipeline([\n",
        "    # add your code about text processing\n",
        "    ('vect', CountVectorizer(analyzer=processText)),\n",
        "    ('tfidf', TfidfTransformer(use_idf=True)),\n",
        "\n",
        "    # change your classifier here, search: sklearn logistic regression example\n",
        "    #('clf', SGDClassifier())\n",
        "     ('clf', LogisticRegression())\n",
        "\n",
        "])"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vuq37Bf3Qjpn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "outputId": "08ea2087-8b9e-428a-f7f1-08602e581568"
      },
      "source": [
        "# To train the model\n",
        "text_clf.fit(twenty_train1.data, twenty_train1.target)\n"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('vect',\n",
              "                 CountVectorizer(analyzer=<function processText at 0x7b2acd3df640>)),\n",
              "                ('tfidf', TfidfTransformer()), ('clf', LogisticRegression())])"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;vect&#x27;,\n",
              "                 CountVectorizer(analyzer=&lt;function processText at 0x7b2acd3df640&gt;)),\n",
              "                (&#x27;tfidf&#x27;, TfidfTransformer()), (&#x27;clf&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;vect&#x27;,\n",
              "                 CountVectorizer(analyzer=&lt;function processText at 0x7b2acd3df640&gt;)),\n",
              "                (&#x27;tfidf&#x27;, TfidfTransformer()), (&#x27;clf&#x27;, LogisticRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CountVectorizer</label><div class=\"sk-toggleable__content\"><pre>CountVectorizer(analyzer=&lt;function processText at 0x7b2acd3df640&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfTransformer</label><div class=\"sk-toggleable__content\"><pre>TfidfTransformer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gjQ8DmPNRUuJ"
      },
      "source": [
        "# Step 4: Make Prediction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OMdoIHjMRWce"
      },
      "source": [
        "twenty_test = fetch_20newsgroups(subset='test', categories=categories, shuffle=True, random_state=42)\n",
        "predicted = text_clf.predict(twenty_test1.data)\n",
        "\n",
        "# To make prediction with dev/test set\n",
        "#predicted = text_clf.predict(twenty_test1.data)"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "twenty_test = fetch_20newsgroups(subset='test', categories=categories, shuffle=True, random_state=42)\n"
      ],
      "metadata": {
        "id": "p_DSzqrRGvVN"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3GXHJHqoBmyJ"
      },
      "source": [
        "# Step 5: Evaluation"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**You need to modify the code so only two classes from your student number are output as matrix.**"
      ],
      "metadata": {
        "id": "QuBuHl6G5xhN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn import metrics\n",
        "\n",
        "# Calculate the metrics\n",
        "accuracy = metrics.accuracy_score(twenty_test.target, predicted)\n",
        "precision = metrics.precision_score(twenty_test.target, predicted, average='weighted')\n",
        "recall = metrics.recall_score(twenty_test.target, predicted, average='weighted')\n",
        "f1 = metrics.f1_score(twenty_test.target, predicted, average='weighted')\n",
        "\n",
        "# Print the metrics\n",
        "print(f\"Accuracy: {accuracy}\")\n",
        "print(f\"Precision: {precision}\")\n",
        "print(f\"Recall: {recall}\")\n",
        "print(f\"F1 Score: {f1}\")\n",
        "\n",
        "# confusion class\n",
        "pd.DataFrame(metrics.confusion_matrix(twenty_test1.target, predicted),\n",
        "             columns=twenty_test1.target_names,index=twenty_test1.target_names)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        },
        "outputId": "e7c441ea-334c-46e9-8ac1-01b553c1767a",
        "id": "w8mZ75ycbXB1"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7065491183879093\n",
            "Precision: 0.7218961543006627\n",
            "Recall: 0.7065491183879093\n",
            "F1 Score: 0.7012228019145234\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        sci.med  soc.religion.christian\n",
              "sci.med                     227                     169\n",
              "soc.religion.christian       64                     334"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f66388fd-d40a-434f-89a7-8edb90c04327\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sci.med</th>\n",
              "      <th>soc.religion.christian</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>sci.med</th>\n",
              "      <td>227</td>\n",
              "      <td>169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>soc.religion.christian</th>\n",
              "      <td>64</td>\n",
              "      <td>334</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f66388fd-d40a-434f-89a7-8edb90c04327')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f66388fd-d40a-434f-89a7-8edb90c04327 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f66388fd-d40a-434f-89a7-8edb90c04327');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6fb6cbb3-e1d4-4f00-ad3b-080e14c62477\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6fb6cbb3-e1d4-4f00-ad3b-080e14c62477')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6fb6cbb3-e1d4-4f00-ad3b-080e14c62477 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"             columns=twenty_test1\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"sci.med\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115,\n        \"min\": 64,\n        \"max\": 227,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          64,\n          227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"soc.religion.christian\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116,\n        \"min\": 169,\n        \"max\": 334,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          334,\n          169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LdB9js0QDErf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        },
        "outputId": "5a86f14a-193a-4f60-f1e9-8a025f6a4be0"
      },
      "source": [
        "# To evaluate your prediction on dev set\n",
        "from sklearn import metrics\n",
        "print(\"Accuracy:\", metrics.accuracy_score(twenty_test1.target, predicted))\n",
        "\n",
        "# Print the accuracy\n",
        "print(\"Accuracy:\", metrics.accuracy_score(twenty_test.target, predicted))\n",
        "\n",
        "# Print the precision, recall, and F1 score for each category\n",
        "print(metrics.classification_report(twenty_test.target, predicted, target_names=twenty_test.target_names))\n",
        "\n",
        "#  weighted average of these metrics\n",
        "print(\"Weighted Precision:\", metrics.precision_score(twenty_test.target, predicted, average='weighted'))\n",
        "print(\"Weighted Recall:\", metrics.recall_score(twenty_test.target, predicted, average='weighted'))\n",
        "print(\"Weighted F1 Score:\", metrics.f1_score(twenty_test.target, predicted, average='weighted'))\n",
        "\n",
        "print(metrics.classification_report(twenty_test1.target, predicted, target_names=twenty_test1.target_names))\n",
        "\n",
        "# confusion class\n",
        "pd.DataFrame(metrics.confusion_matrix(twenty_test1.target, predicted),\n",
        "             columns=twenty_test1.target_names,index=twenty_test1.target_names)"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7065491183879093\n",
            "Accuracy: 0.7065491183879093\n",
            "                        precision    recall  f1-score   support\n",
            "\n",
            "               sci.med       0.78      0.57      0.66       396\n",
            "soc.religion.christian       0.66      0.84      0.74       398\n",
            "\n",
            "              accuracy                           0.71       794\n",
            "             macro avg       0.72      0.71      0.70       794\n",
            "          weighted avg       0.72      0.71      0.70       794\n",
            "\n",
            "Weighted Precision: 0.7218961543006627\n",
            "Weighted Recall: 0.7065491183879093\n",
            "Weighted F1 Score: 0.7012228019145234\n",
            "                        precision    recall  f1-score   support\n",
            "\n",
            "               sci.med       0.78      0.57      0.66       396\n",
            "soc.religion.christian       0.66      0.84      0.74       398\n",
            "\n",
            "              accuracy                           0.71       794\n",
            "             macro avg       0.72      0.71      0.70       794\n",
            "          weighted avg       0.72      0.71      0.70       794\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        sci.med  soc.religion.christian\n",
              "sci.med                     227                     169\n",
              "soc.religion.christian       64                     334"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35efe558-923d-4128-a204-bd204e94fe09\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sci.med</th>\n",
              "      <th>soc.religion.christian</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>sci.med</th>\n",
              "      <td>227</td>\n",
              "      <td>169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>soc.religion.christian</th>\n",
              "      <td>64</td>\n",
              "      <td>334</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35efe558-923d-4128-a204-bd204e94fe09')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-35efe558-923d-4128-a204-bd204e94fe09 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-35efe558-923d-4128-a204-bd204e94fe09');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-44382656-6d2e-4155-84b2-942aeb8fe661\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-44382656-6d2e-4155-84b2-942aeb8fe661')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-44382656-6d2e-4155-84b2-942aeb8fe661 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"             columns=twenty_test1\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"sci.med\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115,\n        \"min\": 64,\n        \"max\": 227,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          64,\n          227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"soc.religion.christian\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116,\n        \"min\": 169,\n        \"max\": 334,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          334,\n          169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qCLCqFXPQsRq"
      },
      "source": [
        "# Step 6: Error Analysis and Discussion\n",
        "write down your own obseration about the predictions. Consider both confusion matrix and selected examples. Which classes are predicted correctly or incorrecly, possible explaination, possible solutions\n",
        "\n",
        "Exmaple: 1) Lab Practical, which feature is helpful for female name classification. https://www.nltk.org/book/ch06.html\n",
        "2) research paper: https://github.com/yoonkim/CNN_sentence\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kvBw9qkKDS-m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ddd31e69-7fef-4d49-9598-8253394e3a56"
      },
      "source": [
        "print(len(twenty_test.data))\n",
        "print(len(twenty_test.target))\n",
        "predicted = text_clf.predict(twenty_test.data)\n",
        "print(len(predicted))\n",
        "\n",
        "df_pred = pd.DataFrame({'news': twenty_test.data, 'predicted': predicted, 'true': twenty_test.target})\n",
        "df_pred['correct'] = df_pred['predicted'] == df_pred['true']\n",
        "incorrect_predictions = df_pred[df_pred['correct'] == False]\n",
        "\n",
        "#df_pred = pd.DataFrame({'news':twenty_test.data,'prediction':predicted, 'true':twenty_test.target})\n",
        "#df_pred[df_pred['true'] != df_pred['prediction']]"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "794\n",
            "794\n",
            "794\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#evaluate the predictions\n",
        "#creating confusion matrix anc calculating other evaluation metrics\n",
        "\n",
        "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n",
        "\n",
        "# Assuming 'twenty_test.target' are the true labels and 'predicted' are the labels predicted by your model\n",
        "cm = confusion_matrix(twenty_test.target, predicted)\n",
        "cr = classification_report(twenty_test.target, predicted, target_names=twenty_test.target_names)\n",
        "accuracy = accuracy_score(twenty_test.target, predicted)\n",
        "\n",
        "# Print out the metrics\n",
        "print(\"Confusion Matrix:\\n\", cm)\n",
        "print(\"\\nClassification Report:\\n\", cr)\n",
        "print(\"\\nAccuracy:\", accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r1-rMWtrFPzF",
        "outputId": "f3b636a9-46f3-45f5-ffb4-8b1ade09ddf4"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            " [[227 169]\n",
            " [ 64 334]]\n",
            "\n",
            "Classification Report:\n",
            "                         precision    recall  f1-score   support\n",
            "\n",
            "               sci.med       0.78      0.57      0.66       396\n",
            "soc.religion.christian       0.66      0.84      0.74       398\n",
            "\n",
            "              accuracy                           0.71       794\n",
            "             macro avg       0.72      0.71      0.70       794\n",
            "          weighted avg       0.72      0.71      0.70       794\n",
            "\n",
            "\n",
            "Accuracy: 0.7065491183879093\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'predicted' contains your model predictions and 'twenty_test.target' are the true labels\n",
        "cm = confusion_matrix(twenty_test.target, predicted)\n",
        "sns.heatmap(cm, annot=True, fmt='d')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "F5hyO2IZH1xF",
        "outputId": "ebd3f391-5290-409e-8217-edf99572d0de"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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bRQAAGCUxW4UAAAAc6hsAABgGG0UAABglK/vRiHZAADAMMvydgTexZoNAABgFJUNAAAMo40CAACM8vVkgzYKAAAwisoGAACG+foCUZINAAAMo40CAABgEJUNAAAM8/XvRiHZAADAMF8/rpw2CgAAMIrKBgAAhjlpowAAAJNYswEAAIxi6ysAAIBBVDYAADDM108QPafKxubNmzVs2DDFx8fru+++kyS98MIL+uCDDzwaHAAAdYHltHnkqq2qnGy8/vrrSkxMVGBgoD755BM5HA5JUkFBgR566CGPBwgAAGq3KicbDzzwgBYvXqznnntO/v7+rvuXXXaZduzY4dHgAACoC5yWzSNXbVXlNRv79u1Tr169TrkfFham/Px8T8QEAECd4utbX6tc2YiOjtb+/ftPuf/BBx+oVatWHgkKAADUHVVONkaNGqUJEyZo69atstlsOnr0qJYvX64pU6Zo7NixJmIEAKBWsyzPXLVVldso06dPl9PpVJ8+fXTy5En16tVLdrtdU6ZM0fjx403ECABArVab11t4QpUrGzabTffee6/y8vK0e/duffTRRzpx4oTuv/9+E/EBAIBzkJ6eru7duyskJESRkZEaNGiQ9u3b5zampKREKSkpatSokRo2bKjBgwcrNzfXbczhw4eVlJSkoKAgRUZGaurUqSovL69SLOd8gmhAQIDi4uJ06aWXqmHDhuc6DQAAdZ5l2TxyVUVmZqZSUlL00Ucfae3atSorK1Pfvn1VXFzsGjNp0iS99dZbevXVV5WZmamjR4/qhhtucD2vqKhQUlKSSktLtWXLFi1btkxLly7VrFmzqhSLzbKq1gXq3bu3bLbf/sDr16+vUgAm5Pa+0tshADVSxlfNvB0CUOOMPPKi8ffY0WygR+a55Ns3zvm1J06cUGRkpDIzM9WrVy8VFBTo/PPP14oVK3TjjTdKkr744gu1b99eWVlZ6tmzp959911de+21Onr0qKKioiRJixcv1rRp03TixAkFBARU6r2rXNno3LmzOnXq5Lri4uJUWlqqHTt2qGPHjlWdDgCAOs9T52w4HA4VFha6Xb8ernk2BQUFkqSIiAhJUnZ2tsrKypSQkOAa065dOzVv3lxZWVmSpKysLHXs2NGVaEhSYmKiCgsLtWfPnkp//iovEF2wYMFp78+ePVtFRUVVnQ4AAFRSenq65syZ43bv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OHCgvvnmG9d8FRUVSk1NVXh4uBo1aqS7775b//uVR//bRnE4HJo2bZqaNWsmu92u1q1b6/nnn9c333zj+qKw8847TzabTSNGjJAkOZ1Opaenq2XLlgoMDFSnTp302muvub3PO++8ozZt2igwMFC9e/d2ixOA7yLZALwsMDBQpaWlkqR169Zp3759Wrt2rTIyMlRWVqbExESFhIRo8+bN+vDDD9WwYUP169fP9ZrHHntMS5cu1T/+8Q998MEHysvL08qVK8/4nrfddpteeuklLVy4UHv37tUzzzyjhg0bqlmzZnr99dclSfv27dOxY8f0xBNPSJLS09P1z3/+U4sXL9aePXs0adIkDRs2TJmZmZJ+SYpuuOEGDRgwQDt37tSdd96p6dOnm/ptA1CbWACqTXJysjVw4EDLsizL6XRaa9eutex2uzVlyhQrOTnZioqKshwOh2v8Cy+8YLVt29ZyOp2uew6HwwoMDLTWrFljWZZlxcTEWPPnz3c9Lysrs5o2bep6H8uyrCuvvNKaMGGCZVmWtW/fPkuStXbt2tPGuGHDBkuS9eOPP7rulZSUWEFBQdaWLVvcxo4cOdL605/+ZFmWZaWlpVlxcXFuz6dNm3bKXAB8D2s2gGqWkZGhhg0bqqysTE6nU7feeqtmz56tlJQUdezY0W2dxq5du7R//36FhIS4zVFSUqIDBw6ooKBAx44dU48ePVzP6tevr27dup3SSvnVzp07Va9ePV155ZWVjnn//v06efKkrr76arf7paWl6tKliyRp7969bnFIUnx8fKXfA0DdRbIBVLPevXvr6aefVkBAgGJjY1W//n/+GAYHB7uNLSoqUteuXbV8+fJT5jn//PPP6f0DAwOr/JqioiJJ0ttvv60mTZq4PbPb7ecUBwDfQbIBVLPg4GC1bt26UmMvueQSvfLKK4qMjFRoaOhpx8TExGjr1q3q1auXJKm8vFzZ2dm65JJLTju+Y8eOcjqdyszMVEJCwinPf62sVFRUuO7FxcXJbrfr8OHDv1kRad++vd588023ex999NHZPySAOo8FokANNnToUDVu3FgDBw7U5s2bdfDgQW3cuFF/+ctfdOTIEUnShAkTNG/ePK1atUpffPGF7rrrrjOekXHBBRcoOTlZd9xxh1atWuWa81//+pckqUWLFrLZbMrIyNCJEydUVFSkkJAQTZkyRZMmTdKyZct04MAB7dixQ3/729+0bNkySdKYMWP01VdfaerUqdq3b59WrFihpUuXmv4tAlALkGwANVhQUJA2bdqk5s2b64YbblD79u01cuRIlZSUuCodkydP1vDhw5WcnKz4+HiFhITo+uuvP+O8Tz/9tG688UbdddddateunUaNGqXi4mJJUpMmTTRnzhxNnz5dUVFRGjdunCTp/vvv18yZM5Wenq727durX79+evvtt9WyZUtJUvPmzfX6669r1apV6tSpkxYvXqyHHnrI4O8OgNrCZv3WKjIAAAAPoLIBAACMItkAAABGkWwAAACjSDYAAIBRJBsAAMAokg0AAGAUyQYAADCKZAMAABhFsgEAAIwi2QAAAEaRbAAAAKP+H7cOlE0kORbnAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Assume `twenty_test.target` are the true labels and `predicted` are your model's predictions\n",
        "false_positives = np.where((predicted == 1) & (twenty_test.target == 0))[0]\n",
        "false_negatives = np.where((predicted == 0) & (twenty_test.target == 1))[0]\n",
        "\n",
        "#FALSE POSITIVE\n",
        "print(\"Example of a false positive (Predicted as 1 but actual is 0):\")\n",
        "print(twenty_test.data[false_positives[0]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yHsAyF82JtMs",
        "outputId": "633b92d2-148d-4b69-bc52-49790cda1b0c"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Example of a false positive (Predicted as 1 but actual is 0):\n",
            "From: mrbulli@btoy1.rochester.NY.US (Mr. Bulli (private account))\n",
            "Subject: Re: Vasectomy: Health Effects on Women?\n",
            "Reply-To: mrbulli@btoy1.rochester.NY.US\n",
            "Organization: Private UUCP site\n",
            "X-Newsreader: TIN [version 1.1 PL9]\n",
            "Lines: 25\n",
            "\n",
            "On 28 Apr 93 20:54:04 GMT joshm@yang.earlham.edu wrote:\n",
            ": In article <1993Apr27.110440.5069@nic.csu.net>, eskagerb@nermal.santarosa.edu (Eric Skagerberg) writes:\n",
            ": > Does anyone know of any studies done on the long-term health effects of a\n",
            ": > man's vasectomy on his female partner?\n",
            ": > \n",
            ": > ...\n",
            ": I've heard of NO studies, but speculation:\n",
            "\n",
            ": Why on _earth_ would there be any effect on women's health?  That's about \n",
            ": the most absurd idea I've heard since Ted Kaldis's claim that no more than \n",
            ": 35,000 people would march on Washington.\n",
            "\n",
            ": Ok, _one_ point:  Greatly reduced chance of pregnancy.  But that's it.\n",
            "\n",
            ": --Josh\n",
            "\n",
            "Well, there might be another: Since I'm sterile my wife can enjoy sex \n",
            "without fear of getting pregnant.\n",
            "--\n",
            "  ______                             __        _  _\n",
            "    /   /                           /  )      // //                        \n",
            "   /   /_  __________  __.  _      /--<  . . // // o ____  _,  _  __\n",
            "(_/   / /_(_) / / / <_(_/|_/_)    /___/_(_/_</_</_<_/ / <_(_)_</_/ (_\n",
            "       UUCP:     ..rutgers!ur-valhalla!btoy1!mrbulli      /|  Compu$erve:\n",
            "       Internet:       mrbulli@btoy1.rochester.NY.US     |/    76535,2221\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#FALSE NEGETIVE\n",
        "print(\"Example of a false negative (Predicted as 0 but actual is 1):\")\n",
        "print(twenty_test.data[false_negatives[0]])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "atcygPn4KfUv",
        "outputId": "e480a65a-f92b-44a4-c2b1-e2f8bc6819fb"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Example of a false negative (Predicted as 0 but actual is 1):\n",
            "From: Eugene.Bigelow@ebay.sun.com (Geno )\n",
            "Subject: Re: SJ Mercury's reference to Fundamentali\n",
            "Reply-To: Eugene.Bigelow@ebay.sun.com\n",
            "Organization: Sun Microsystems, Inc.\n",
            "Lines: 18\n",
            "\n",
            "In article <May.11.02.37.07.1993.28120@athos.rutgers.edu>, dan@ingres.com (a Rose arose) writes:\n",
            "|> \t\"Raised in Oakland and San Lorenzo by strict fundamentalist\n",
            "|> \tChristian parents, Mason was beaten as a child.  ...\n",
            "\n",
            "|> Were the San Jose Mercury news to come out with an article starting with\n",
            "|> \"Raised in Oakland by Mexican parents, Mason was beaten...\", my face would\n",
            "\n",
            ">Perhaps because there is a connection here that is not there in the Mexican\n",
            ">variant you bring up.\n",
            "\n",
            "This is true. The statement didn't say anything about Christians in general.\n",
            "It specifically said \"strict fundamentalist\" Christians. It reflects a\n",
            "common perception that people have about fundamentalists being strict\n",
            "disciplinarians. Whether or not this perception is justified is another issue.\n",
            "\n",
            "\n",
            "[The other reading is that they are distinguishing between strict\n",
            "and relaxed fundamentalists.  --clh]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display examples of CORRECT predictions\n",
        "correct_indices = [i for i, (true, pred) in enumerate(zip(twenty_test.target, predicted)) if true == pred]\n",
        "incorrect_indices = [i for i, (true, pred) in enumerate(zip(twenty_test.target, predicted)) if true != pred]\n",
        "\n",
        "print(\"Correctly predicted examples:\")\n",
        "for i in correct_indices[:5]:  # Display first 5 correct predictions\n",
        "    print(f\"News: {twenty_test.data[i]}\")\n",
        "    print(f\"Predicted: {twenty_test.target_names[predicted[i]]}, Actual: {twenty_test.target_names[twenty_test.target[i]]}\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KisPQAs0HWx0",
        "outputId": "378fdf02-5774-4d62-eca8-56ce50decbc1"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correctly predicted examples:\n",
            "News: From: sun075!Gerry.Palo@uunet.uu.net (Gerry Palo)\n",
            "Subject: Re: Portland earthquake\n",
            "Lines: 68\n",
            "\n",
            "Austin C Archer (archau@saturn.wwc.edu) wrote:\n",
            ">\n",
            ">I am interested in views about the non-event of May 3. Seriously, how can a \n",
            ">Christian discriminate between \"messages from God\" which are to be taken \n",
            ">seriously, and those which are spurious?  Is there a useful heuristic which \n",
            ">would help us avoid embracing messages which, by their non-fulfillment are \n",
            ">proven to be false, thus causing the name of Christ to be placed in \n",
            ">disrepute? Is this a problem at all?\n",
            "\n",
            "It is possible that the individual saw a true prophetic vision, but that he\n",
            "interpreted the scale of time and space according to his material con-\n",
            "sciousness, translating the supersensible perceptions of a plane above\n",
            "that of time and space into an immediate worldly context -- and getting it\n",
            "wrong.  Not that he did it rationally, but rather that unconsciously the\n",
            "perceptions became clothed in material images, instead of remaining in the\n",
            "realm of the potential and not-yet-time-space-bound.  This difficulty of\n",
            "translating prophetic vision into a concrete when and where has always been\n",
            "difficult, even for the prophets of old.  That is why their prophecies are\n",
            "so often subject to multiple interpretations.  Likewise, the Apostles seemed\n",
            "to feel that the return of the Lord was to be \"very soon\" in the sense of\n",
            "perhaps the same generation. Yet the meaning of \"very soon\" has proven to\n",
            "be different than they could grasp.  Prophetic vision tends to telescope\n",
            "time, so that things that are far off appear to be very close.\n",
            "\n",
            "Another possibility is that the vision was one of a real event preparing to\n",
            "happen, again in the realm of the potential-but-not-yet-manifest and which\n",
            "was thwarted by other forces, including possibly an act of divine mercy.\n",
            "\n",
            "There are many concrete prophecies being made these days by devout and\n",
            "sincere and sober Christians (and others too).  It seems that great coming \n",
            "events are really casting their shadow before their arrival in these \n",
            "\"apocalyptic\" times.  The various predictions (I'm talking about those that\n",
            "appear to be sincere and sober) are hard to accept, yet hard to ignore com-\n",
            "pletely.  One has the feeling \"something is about to start to get ready to \n",
            "begin to commence to happen\".  We are living, as the Chinese saying goes,\n",
            "in interesting times.\n",
            "\n",
            "As for how to discriminate, the Bible doesn't help much.  There is an Old\n",
            "Testament passage (I forget where it is) that says you will know whether\n",
            "a prophet is true by whether or not his prophecy comes to pass.  That\n",
            "helps eliminate the failures after the fact, but in the case of an earth-\n",
            "quake it is small comfort.  It seems to me that all prophecies that give\n",
            "specific times and places and events should be suspect, not in that they\n",
            "are necessarily false, but in the sense stated above, that all such visions\n",
            "are subject to mistranslation from the plane of prophetic vision to the\n",
            "plane of earthly time and space.\n",
            "\n",
            "For what it is worth, Rudolf Steiner once was asked whether a modern initiate \n",
            "could see into the future and predict coming events.  His answer was that \n",
            "it would be possible but then he would have to withdraw from active parti-\n",
            "cipation in them, including proclaiming what he saw.  If this is in fact\n",
            "a spiritual law, then the answer to your question about how to discriminate\n",
            "is that the one who makes such prophecies is probably violating that law,\n",
            "knowingly or unknowingly, and as such his message should be considered\n",
            "a priori to be dubious.  I.e. I would expect that those capable of making\n",
            "true predictions and giving accurate expression to them would not do so in \n",
            "the way that the prophet of the Oregon earthquake did.  However, I can\n",
            "sympathize with the person who published the prophecy. Given the same\n",
            "overwhelming experience that he apparently had,  I too might feel impelled, \n",
            "and even commissioned by God to tell my fellow human beings about what \n",
            "I had seen.\n",
            "\n",
            "Gerry Palo (73237.2006@compuserve.com)\n",
            "\n",
            "\n",
            "[Do any of our church historian readers know whether there's any\n",
            "more prophecy now than there has been in the past?  I don't get\n",
            "that impression.  --clh]\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: soc.religion.christian\n",
            "\n",
            "News: From: fsela1@acad3.alaska.edu\n",
            "Subject: Re: Why do people become atheists?\n",
            "Organization: University of Alaska Fairbanks\n",
            "Lines: 21\n",
            "\n",
            "In article <May.5.02.50.42.1993.28665@athos.rutgers.edu>, Fil.Sapienza@med.umich.edu (Fil Sapienza) writes:\n",
            "> I am interested in finding out why people become\n",
            "> atheists after having believed in some god/God.\n",
            "> In conversing with them on other groups, I've\n",
            "> often sensed anger or hostility.   Though I don't\n",
            "> mean to imply that all atheists are angry or hostile,\n",
            "> it does seem to be one motivation for giving up\n",
            "> faith.  Thus, some atheism might result from \n",
            "> broken-ness.\n",
            "\n",
            "\n",
            "i'm atheist\n",
            "just because\n",
            "there is no supreme being\n",
            "there is the world as we know it\n",
            "and it's wonderful and incredible\n",
            "and there is love between people\n",
            "and these things are everything\n",
            "i don't believe in a god that made this all\n",
            "i believe in the amazing and beautiful\n",
            "teaming with life world i live in\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: soc.religion.christian\n",
            "\n",
            "News: From: Mail.Server@mozart.cc.iup.edu (mserv)\n",
            "Subject: Ten Commandments or Ten Discourses?\n",
            "Lines: 135\n",
            "\n",
            "In the course of discussing the Sabbath with some folks, \n",
            "I came across something that was completely new to me, \n",
            "and I thought I'd offer it for comment.\n",
            "\n",
            "To keep this as brief as possible, let me state my \n",
            "observation as a declarative statement, and then whoever \n",
            "wants to can comment on it.  Basically, what I think \n",
            "I've observed is that the phrase \"the Ten Commandments\", \n",
            "as used by Moses, is not a reference to Ex. 20:1-17, but \n",
            "rather a reference to ten distinct discourses from Ex. \n",
            "20:1 through Ex. 31:18.  That is, the phrase \"the Ten \n",
            "Commandments\" should more accurately be translated \"the \n",
            "Ten Discourses\", of which the passage we call the \"Ten \n",
            "Commandments\" is really only the first.\n",
            "\n",
            "I'm not completely convinced that the above is true, but \n",
            "for purposes of discussion, let me argue it as though I \n",
            "was sure.\n",
            "\n",
            "Arguments supporting the above idea:\n",
            "\n",
            "1)  There aren't really ten commandments in Ex. 20:1-17.  \n",
            "In order to get 10 commandments, you have to get two of \n",
            "them out of verses 3-6, and the verses themselves do not \n",
            "support such a division because they are all about not \n",
            "worshipping other gods.  That is, verse 3 commands to \n",
            "have no other gods, and verse 5 commands to not worship \n",
            "the idols mentioned in verse 4.  You can't violate \n",
            "verses 5-6 without violating verse 3, indicating that \n",
            "the whole passage is one command, and leaving us with \n",
            "only Nine \"Commandments\".  I could go on at length about \n",
            "this, but for now I'll just stop with this summary.\n",
            "\n",
            "2)  There ARE ten speeches between Ex 20:1 (the beginning\n",
            "of the traditional \"Ten Commandments\") and Ex 31:18 \n",
            "(where God actually gives Moses the two tablets with the \n",
            "Ten Commandments/Discourses written on them).  I break \n",
            "these ten down as follows: 20:1-17; 20:22-26; 21:1-23:33; \n",
            "25:1-30:10; 30:11-16; 30:17-21; 30:22-33; 30:34-38; \n",
            "31:1-11; and 31:12-18.  In most cases, each of these \n",
            "passages begins with some variation of the phrase, \"And \n",
            "the LORD spoke to Moses, saying...\"  The exception is \n",
            "Ex. 21:1, which begins \"Now these are the ordinances \n",
            "which you are to set before them...\"\n",
            "\n",
            "3)  The word translated \"commandments\" in the phrase \n",
            "\"the Ten Commandments\" isn't really the word for \n",
            "\"commandment\", its the word for a speech, or an \n",
            "utterance.  It's a word often used for longer discourses \n",
            "rather than individual statements; for instance, when \n",
            "combined with the word 'yom' (day), this word is \n",
            "translated \"Chronicles\" in such phrases as \"now the rest \n",
            "of the acts of so-and-so, are they not written in the \n",
            "Chronicles of x?...\"  The word for \"commandment\" is \n",
            "freely used throughout the books of Moses, and perhaps \n",
            "it is significant that when Moses spoke of the Ten X's, \n",
            "he appears to have avoided the word for commandment and \n",
            "chosen instead a word associated with discourses longer \n",
            "than just a single command.\n",
            "\n",
            "4)  God tells Moses that He is going to give him the \n",
            "stone tablets \"with the law and the commandments\" (Ex \n",
            "24:12), yet He does not give Moses the tablets until He \n",
            "has finished all ten discourses on Mount Sinai.  If the \n",
            "Ten Commandments were only Ex. 20:1-17, it is not \n",
            "immediately clear why God would wait several days and \n",
            "nine more discourses before giving these tablets to \n",
            "Moses.  On the other hand, if we have the Ten Discourses \n",
            "written on the tablets, then it makes perfect sense that \n",
            "God would not give Moses the tablets until He had \n",
            "finished delivering all Ten Discourses.\n",
            "\n",
            "5)  When Moses did get the tablets, he found that both \n",
            "tablets were written on both sides (Ex. 32:15).  If \n",
            "these Ten \"Commandments\" were only the first 17 verses \n",
            "of Ex. 20, God would have had to have written in LARGE \n",
            "letters!  Not that He couldn't have, of course, but it \n",
            "does seem more likely to me that this is a reference to \n",
            "two tablets containing ten discourses written in normal-\n",
            "sized letters.\n",
            "\n",
            "6)  In II Cor. 3, Paul seems to specifically single out \n",
            "the \"commandments written on stone\" as being the \n",
            "\"ministry of death\", \"that which is fading away,\" and \n",
            "\"the ministry of condemnation.\"  With the possible \n",
            "exception of the commandment about the Sabbath, it is \n",
            "difficult to see why Paul would refer to the commands in \n",
            "Ex. 20:1-17 as being temporary, \"fading away\"-type \n",
            "commandments.  This is less of a problem if the stone \n",
            "tablets should happen to have included all of the \n",
            "commandments from Ex 20 through Ex 31.\n",
            "\n",
            "Arguments against this idea:\n",
            "\n",
            "The main argument against this idea, aside from the fact \n",
            "that it contradicts a long-standing tradition, is that \n",
            "in Dt 5:22, Moses says, after quoting the commands in \n",
            "Ex. 20:1-17, \"These words the LORD spoke...and He added \n",
            "no more.  And He wrote them on two tablets of stone and \n",
            "gave them to me.\"  This appears to identify the words \n",
            "just quoted as being the only contents of the two stone \n",
            "tablets.\n",
            "\n",
            "That was my first impression, anyway.  However, after \n",
            "some thought, I noted that a great deal hinges on how \n",
            "you understand the phrase \"These words.\"  If Moses meant \n",
            "\"These words *which I have just related to you* were \n",
            "spoken by God\" etc., then that would mean that only the \n",
            "traditional \"Ten Commandments\" were on the stone \n",
            "tablets.  If, however, Moses was making a parenthetical \n",
            "comment--\"These words *which I AM NOW telling you* were \n",
            "spoken by God\" etc.--then that's quite different.\n",
            "\n",
            "I did note that in the Dt 5 account, Moses tells of \n",
            "being given the stone tablets BEFORE telling of the \n",
            "people asking Moses to represent them before God, \n",
            "whereas in the Exodus account, the people asked this of \n",
            "Moses between the first and second discourses, several \n",
            "days BEFORE God gave Moses the stone tablets.  This \n",
            "reinforces the idea that Moses' remarks in Dt 5:22ff \n",
            "were intended as a parenthetical remark, rather than a \n",
            "strictly chronological account of when God wrote what, \n",
            "and at what point He stopped adding to what was on the \n",
            "tablets.\n",
            "\n",
            "Summary:  all things considered, I find it somewhat more \n",
            "likely that the nine commands in Ex 20 are really only \n",
            "the first of what Moses regarded as the Ten Discourses \n",
            "of God.  I don't know if anybody has ever espoused this \n",
            "idea before; it's brand-new to me.  So, while I lean \n",
            "towards accepting it, I would be very interested in \n",
            "hearing any comments and criticisms anyone may care to \n",
            "offer.\n",
            "\n",
            "- Mark\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: soc.religion.christian\n",
            "\n",
            "News: From: swf@elsegundoca.ncr.com (Stan Friesen)\n",
            "Subject: Re: Re:Major Views of the Trinity\n",
            "Reply-To: swf@elsegundoca.ncr.com\n",
            "Lines: 31\n",
            "\n",
            "In article <May.9.05.41.12.1993.27549@athos.rutgers.edu>, Bocher writes:\n",
            "|> \n",
            "|> It seems that during the Middle Ages, it was customary for pastors to \n",
            "|> explain the Trinity to their parishoners by analogy to water.\n",
            "|> Water is water, but can exist in three forms--liquid, ice and vapor.\n",
            "|> Thus it is possible for one essence to exist in three forms.\n",
            "\n",
            "This sounds to me like a sort of generic modalism (in the the three phases\n",
            "of water are but different modes of behavior of the same physical stuff).\n",
            "It certainly does not seem to me to describe the orthodox position.\n",
            "\n",
            "[Of course, I suppose that the medieval view of water may have been\n",
            "different, but now we know that the phases of water are just different\n",
            "*behaviors* of the same physical stuff - different modes, not different\n",
            "identities - but perhaps the medieval people did not know that].\n",
            "\n",
            "|> And recently, the pastor of my church drew an analogy, which I\n",
            "|> also found useful--A woman is often percieved by others in three\n",
            "|> ways, depending on their relationship to her--a mother, a wife and\n",
            "|> an employee in a business.\n",
            "\n",
            "This is clearly Modalistic Monarchianism, since these three aspects depend\n",
            "solely on point of view, and are do not really represent actual variety\n",
            "within the person.\n",
            "\n",
            "Do you now begin to see why \n",
            "\n",
            "-- \n",
            "sarima@teradata.com\t\t\t(formerly tdatirv!sarima)\n",
            "  or\n",
            "Stanley.Friesen@ElSegundoCA.ncr.com\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: soc.religion.christian\n",
            "\n",
            "News: From: eileen@microware.com (Eileen Beck)\n",
            "Subject: cortisone shots\n",
            "Nntp-Posting-Host: waldo\n",
            "Organization: Microware Systems Corp., Des Moines, Iowa\n",
            "Lines: 9\n",
            "\n",
            "I need some information on the implications of receiving\n",
            "cortisone shots for a seasonal allergic condition.  \n",
            "\n",
            "I've had the usual \"skin prick\" tests for the\n",
            "common allergies, but reacted to none of the substances.\n",
            "So for the last two seasons I've received cortisone shots\n",
            "but the doctors seem reluctant to give more than two or\n",
            "three shots.  Why?  What are the dangers?\n",
            "\n",
            "\n",
            "Predicted: sci.med, Actual: sci.med\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Incorrect Predicted Example\n",
        "\n",
        "print(\"Incorrectly predicted examples:\")\n",
        "for i in incorrect_indices[:5]:  # Display first 5 incorrect predictions\n",
        "    print(f\"News: {twenty_test.data[i]}\")\n",
        "    print(f\"Predicted: {twenty_test.target_names[predicted[i]]}, Actual: {twenty_test.target_names[twenty_test.target[i]]}\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xCHprexKK2o",
        "outputId": "cb5284ca-4cad-4e49-e6d8-83ba4617bd5b"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Incorrectly predicted examples:\n",
            "News: From: Eugene.Bigelow@ebay.sun.com (Geno )\n",
            "Subject: Re: SJ Mercury's reference to Fundamentali\n",
            "Reply-To: Eugene.Bigelow@ebay.sun.com\n",
            "Organization: Sun Microsystems, Inc.\n",
            "Lines: 18\n",
            "\n",
            "In article <May.11.02.37.07.1993.28120@athos.rutgers.edu>, dan@ingres.com (a Rose arose) writes:\n",
            "|> \t\"Raised in Oakland and San Lorenzo by strict fundamentalist\n",
            "|> \tChristian parents, Mason was beaten as a child.  ...\n",
            "\n",
            "|> Were the San Jose Mercury news to come out with an article starting with\n",
            "|> \"Raised in Oakland by Mexican parents, Mason was beaten...\", my face would\n",
            "\n",
            ">Perhaps because there is a connection here that is not there in the Mexican\n",
            ">variant you bring up.\n",
            "\n",
            "This is true. The statement didn't say anything about Christians in general.\n",
            "It specifically said \"strict fundamentalist\" Christians. It reflects a\n",
            "common perception that people have about fundamentalists being strict\n",
            "disciplinarians. Whether or not this perception is justified is another issue.\n",
            "\n",
            "\n",
            "[The other reading is that they are distinguishing between strict\n",
            "and relaxed fundamentalists.  --clh]\n",
            "\n",
            "Predicted: sci.med, Actual: soc.religion.christian\n",
            "\n",
            "News: From: mrbulli@btoy1.rochester.NY.US (Mr. Bulli (private account))\n",
            "Subject: Re: Vasectomy: Health Effects on Women?\n",
            "Reply-To: mrbulli@btoy1.rochester.NY.US\n",
            "Organization: Private UUCP site\n",
            "X-Newsreader: TIN [version 1.1 PL9]\n",
            "Lines: 25\n",
            "\n",
            "On 28 Apr 93 20:54:04 GMT joshm@yang.earlham.edu wrote:\n",
            ": In article <1993Apr27.110440.5069@nic.csu.net>, eskagerb@nermal.santarosa.edu (Eric Skagerberg) writes:\n",
            ": > Does anyone know of any studies done on the long-term health effects of a\n",
            ": > man's vasectomy on his female partner?\n",
            ": > \n",
            ": > ...\n",
            ": I've heard of NO studies, but speculation:\n",
            "\n",
            ": Why on _earth_ would there be any effect on women's health?  That's about \n",
            ": the most absurd idea I've heard since Ted Kaldis's claim that no more than \n",
            ": 35,000 people would march on Washington.\n",
            "\n",
            ": Ok, _one_ point:  Greatly reduced chance of pregnancy.  But that's it.\n",
            "\n",
            ": --Josh\n",
            "\n",
            "Well, there might be another: Since I'm sterile my wife can enjoy sex \n",
            "without fear of getting pregnant.\n",
            "--\n",
            "  ______                             __        _  _\n",
            "    /   /                           /  )      // //                        \n",
            "   /   /_  __________  __.  _      /--<  . . // // o ____  _,  _  __\n",
            "(_/   / /_(_) / / / <_(_/|_/_)    /___/_(_/_</_</_<_/ / <_(_)_</_/ (_\n",
            "       UUCP:     ..rutgers!ur-valhalla!btoy1!mrbulli      /|  Compu$erve:\n",
            "       Internet:       mrbulli@btoy1.rochester.NY.US     |/    76535,2221\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: sci.med\n",
            "\n",
            "News: From: menon@boulder.Colorado.EDU (Ravi or Deantha Menon)\n",
            "Subject: Re: Should I be angry at this doctor?\n",
            "Nntp-Posting-Host: beagle.colorado.edu\n",
            "Organization: University of Colorado, Boulder\n",
            "Distribution: na\n",
            "Lines: 44\n",
            "\n",
            "brandon@caldonia.nlm.nih.gov (Brandon Brylawski) writes:\n",
            "\n",
            ">mryan@stsci.edu writes:\n",
            ">: Am I justified in being pissed off at this doctor?\n",
            ">: \n",
            ">: Last Saturday evening my 6 year old son cut his finger badly with a knife.\n",
            ">: I took him to a local \"Urgent and General Care\" clinic at 5:50 pm.  The \n",
            ">: clinic was open till 6:00 pm.  The receptionist went to the back and told the \n",
            "<:  ....other good stuff about the Drs idiocy\n",
            "\n",
            "Ok, much as I hate to do it, here I am posting an EVEN BETTER \"Dr. Idiot\"\n",
            "story.\n",
            "\n",
            "\n",
            "I was in my 18th hour of labor, had been pushing for 4.5 hours and was\n",
            "exhausted.  My OB and I decided to go for a csec.  The OB called in\n",
            "the anesthisiologist (sp?) and asked him to help prep me for surgery.\n",
            "\n",
            "AFTER, watching me go through a couple contractions, the anes (or anus as\n",
            "I like to refer to him) said, \"Well, I am off duty now.\" (still staring\n",
            "between my legs at that).  The OB asked to go call whomever it was who\n",
            "was on duty and ask him/her how long it would take...and if it was going\n",
            "to take more than a few minutes, to please stay even though he was off duty.\n",
            "\n",
            "The anes. went out, supposedly to call the on-call anes.   In a couple of\n",
            "minutes the nurse came running in to tell the OB that the anes. had left\n",
            "without even trying to get ahold of the on-call.  It was the only time \n",
            "during my labor that I swore.  The on-call anes. took 20 minutes to get\n",
            "there.\n",
            "\n",
            "Come to find out, the anes. had only just gone off duty (about 2 minutes\n",
            "before) and technically was supposed to stay in the hospital until the\n",
            "next on-call got there.  Good thing for all of us (especially him) that\n",
            "it was not a critical emergency.  But boy would I love to knock that\n",
            "fellow's ouchie places ...just to let him be in pain a\n",
            "few little minutes.\n",
            "\n",
            "\n",
            "\n",
            "I have run into \"Dr. Idiots\", \"Mechanic Idiots\", \"Clerk Idiots\" and \"Etc.\n",
            "Idiots\" in my time, but this fellow I would like to have words with.\n",
            "\n",
            "\n",
            "Deantha\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: sci.med\n",
            "\n",
            "News: From: dhammers@pacific.? (David Hammerslag)\n",
            "Subject: Re: Mormon Temples\n",
            "Organization: /u/dhammers/.organization\n",
            "Lines: 21\n",
            "\n",
            "In article <May.7.01.08.52.1993.14488@athos.rutgers.edu> brh54@cas.org (Brooks Haderlie) writes:\n",
            "\n",
            "   searching out our deceased ancestors so that we can perform the\n",
            "   ordinances -- such as baptism, confirmation, and marriage for time and\n",
            "   eternity -- that are required for a person to obtain salvation through\n",
            "   Christ and to live with Him through the eternities. These are people\n",
            "   who may have not had the opportunity to know Christ in their lifetime,\n",
            "   so we are making it possible for Christ's saving grace (I know there\n",
            "   are thousands of interpretations of that phrase) to become fully\n",
            "   effective for them if they allow it to do so on the other side.\n",
            "\n",
            "\n",
            "This paragraph brought to mind a question.  How do you (Mormons) reconcile\n",
            "the idea of eternal marriage with Christ's statement that in the ressurection\n",
            "people will neither marry nor be given in marriage (Luke, chapt. 20)?\n",
            "\n",
            "-------------------------------------------------------------------------------\n",
            "David Hammerslag (dhammers@urbana.mcd.mot.com)\n",
            "   \"...there ain't nobody so bad that the Lord can't save 'em ain't\n",
            "        nobody so good they don't need God's love...\" -- Mullins \n",
            "-------------------------------------------------------------------------------\n",
            "\n",
            "Predicted: sci.med, Actual: soc.religion.christian\n",
            "\n",
            "News: From: pinn@cpqhou.se.hou.compaq.com (Steve Pinn x44304)\n",
            "Subject: Re: REQUEST: Gyro (souvlaki) sauce\n",
            "Organization: Compaq Computer Corp.\n",
            "Distribution: usa\n",
            "X-Newsreader: TIN [version 1.1 PL8]\n",
            "Lines: 32\n",
            "\n",
            "Michael Trofimoff (tron@fafnir.la.locus.com) wrote:\n",
            "\n",
            ": Hi All,\n",
            "\n",
            ": Would anyone out there in 'net-land' happen to have an\n",
            ": authentic, sure-fire way of making this great sauce that\n",
            ": is used to adorn Gyro's and Souvlaki?\n",
            "\n",
            ": Thanks,\n",
            "\n",
            "I have a receipe at home that was posted to me by one of our fellow\n",
            "netters about a month ago.  I am recalling this from memory but\n",
            "I think I'm fairly close (by the way it was GREAT!)\n",
            "\n",
            "1 \tpint of plain yogurt \n",
            "1/2\tmed. sized cucumber finely shredded\n",
            "3\tcloves of garlic (more or less by taste)\n",
            "1/4 tsp\tdill weed\n",
            "\n",
            "The yogurt is dumped into a strainer lined with a coffee\n",
            "filter and allowed to drain at least 2 hours (you can\n",
            "adjust the consistancy of the sauce by increasing this time\n",
            "up to 24 hours)\n",
            "\n",
            "The shredded cuc is drained the same way\n",
            "\n",
            "Mix it all together and let it steep for at least\n",
            "2 hours (it's better the next day) and enjoy!\n",
            "\n",
            "Steve\n",
            "\n",
            "\n",
            "\n",
            "Predicted: soc.religion.christian, Actual: sci.med\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DRIRg2rufjPu"
      },
      "source": [
        "#References:  \n",
        "\n",
        "https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html\n",
        "\n",
        "https://www.nltk.org/book/ch06.html\n",
        "\n",
        "search: Other online resources:\n",
        "\n",
        "https://towardsdatascience.com/setting-up-text-preprocessing-pipeline-using-scikit-learn-and-spacy-e09b9b76758f\n",
        "\n",
        "sentiment analysis scikit learn\n",
        "\n",
        "scikit learn or nltk + NLP techniques\n",
        "\n",
        "python + NLP techniques\n",
        "\n",
        "scikit learn logistic regression\n",
        "\n",
        "\n"
      ]
    }
  ]
}